from google.appengine.ext import db

import datetime

class Book(db.Expando): pass


obj = Book()
obj.title = "The Grapes of Wrath"
obj.author = 'John Steinbeck'
obj.copyright_year = 1939

obj.author_birthdate = datetime.datetime(1902, 2, 27)

obj.put()


---

from google.appengine.ext import db

import datetime

class Book(db.Expando): pass


obj = Book(title='The analysis of algorithms', author=['purdom', 'brown'])
obj.put()


--

from google.appengine.ext import db

import datetime

class Book(db.Expando): pass


obj = Book(title='The design of algorithms', author='ullman', key_name='dsgn-ullman')
obj.put()

----

from google.appengine.ext import db

class Book(db.Model):
  title = db.StringProperty()
  author = db.StringProperty()

class BookReview(db.Model):
  book = db.ReferenceProperty(Book, collection_name = 'reviews')

b = Book()
b.put()
br = BookReview()
br.book = b
br.put()

-----

from google.appengine.ext import db

class Book(db.Model):
  title = db.StringProperty()
  author = db.StringProperty()
  rating = db.IntegerProperty()

b = Book(title="Art of programming", author="Knuth", rating=5)
b.put()


----

from google.appengine.ext import db

class Book(db.Expando): pass

k = "Dsgn-ullman"
key = db.Key.from_path('Book',k)
b = Book.get(key)

for k in b.instance_properties():
    print k, "=", getattr(b, k)


----
from google.appengine.ext import db

class Book(db.Expando): pass

k = 402
key = db.Key.from_path('Book', k)
b = Book.get(key)

for k in b.instance_properties():
    print k, "=", getattr(b, k)


---
from google.appengine.ext import db

class BookReview(db.Model):
  book = db.ReferenceProperty(Book, collection_name = 'reviews')


br = BookReview.get(db.Key.from_path('BookReview', 408))
print br.book.title


----


from google.appengine.ext import db

for review in db.get(db.Key.from_path('Book', 402)).reviews:
    print review.book.title

----

from google.appengine.ext import db
import datetime

class MessageBoard(db.Expando): pass
class Message(db.Expando) : pass

def create_message_txn(board_name, message_name, message_title, message_text):

  board = db.get(db.Key.from_path('MessageBoard', board_name))
  if not board:
    board = MessageBoard(key_name=board_name)
    board.count = 0

  message = Message(key_name = message_name, parent=board)
  message.title = message_title
  message.text  = message_text
  message.post_date = datetime.datetime.now()

  board.count += 1

  db.put([board, message])


create_message_txn('GAE', 'transaction-1', 'datastore transactions', 'transations rule') 
----
from google.appengine.ext import db

class ModelBase(db.Expando):
    creation_date = db.DateTimeProperty(auto_now_add=True)
    created_by = db.StringProperty()                                                                                                                                                                                      
    lastupdate_date = db.DateTimeProperty(auto_now=True)
    lastupdated_by = db.StringProperty()

class NodeX(ModelBase):
    ref = db.BooleanProperty(default=False)
    tenant = db.StringProperty(required=True)

class RelationshipTypeX(ModelBase): pass

class RelationshipX(ModelBase):
    rel_type = db.ReferenceProperty(RelationshipTypeX, collection_name = 'relations', required = True)
    start_node = db.ReferenceProperty(NodeX, collection_name='outgoing', required  = True)
    end_node = db.ReferenceProperty(NodeX, collection_name='incoming', required  = True)

left = RelationshipTypeX(key_name='LEFT')
right = RelationshipTypeX(key_name='RIGHT')

n  = NodeX(name='B', tenant='NEW')
nl = NodeX(name='A', tenant='NEW')
nr = NodeX(name='C', tenant='NEW')

db.put([left, right, n, nl, nr])

r1 = RelationshipX(rel_type=left, start_node=n, end_node=nl)
r2 = RelationshipX(rel_type=right, start_node=n, end_node=nr)

db.put([r1, r2])

------

nodes = NodeX.gql("where name=:1", 'B').fetch(10)

for n in nodes:
    print n.name
    for outrel in n.outgoing:
        print outrel.rel_type.key().name() , "->", outrel.end_node.name
-----------
