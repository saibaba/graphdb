Graph DB as a service - a generic API to create nodes and relationships between the nodes. Each node or relationship can have properties as name and value pairs.

There is always a reference node: "/graphdb/ref" eventhough it is not mandatory to use in a relationship graph.

Nodes are identified by a UUID, or other means as given below in examples.

You can browse through the nodes and create new nodes/relations by starting at: "/graphdb/ref".

Directionality of relationships (incoming or outgoing) is entirely semantic and up to user to define meaning - API allows for traversing in any direction

You can use ref (or any) node to create new nodes even if the new ones are not related to it.

Authentication/Registration:
Before using the API, you need to register a username and password by visiting /auth/login - You need to pass the credentials in each API call.

1) Creating a Node:

Create a node (POSTing to either ref or another node identified by node_id):

POST /graphdb/<node>

Format of <node>:
a) ref
b) node_id (the UUID)
c) Node(property_name=property_value, ...)  # make sure to escape '(' or ')' in shell scripts


In request body, include properties/relations in "yaml", for example, as in:
#yaml start
node:
  properties:
    title: The Matrix
    year: 1999
#yaml end

Another example
#yaml start
node:
  properties:
    name: Keanu Reeves
  relations:
    - to: Node(title=The Matrix)
      type: ACTS_IN
      properties:
        name: Neo
#yaml end

Apart from the format of <node> above, there is one more way to address a node in a relationship: "current" to identify the node to which the content is posted to.

Try above in the browser at url: /graphdb/ref.

The same example using curl:


2) Getting the details of a node:

GET /graphdb/(ref|{node_id}) returns the response body with node info including properties, outgoing relations, and incoming relations, for example:

curl -X "GET" -H "Accept: application/json"  http://127.0.0.1:9080/graphdb/8948424b-ac1d-4089-8ed3-61904d7ba6d9

{"relationships": {"outgoing": [{"type_name": "ATTRIBUTE", "link": "/graphdb/7563023e-0e01-4f9f-b964-3d5129884282", "properties": [{"name": "DefaultValue", "value": "15.0"}, {"name": "Name", "value": "Display Size"}]}, {"type_name": "PRODUCT", "link": "/graphdb/8a5cd207-c281-4394-88cf-56c8e1f33af4", "properties": []}, {"type_name": "PRODUCT", "link": "/graphdb/91b3d76a-8fa0-467a-839e-c82e8bf42371", "properties": []}], "incoming": [{"type_name": "SUBCATEGORY", "link": "/graphdb/e608f901-974a-4cdf-913c-8d9f8f096cd4", "properties": []}]}, "properties": [{"name": "Name", "value": "Laptops"}]}

OR

3) Updating a node:

a) Replace a node:
PUT /graphdb/{node_id}

In request body include "yaml" properties and relations (just like in POST) to replace with.
You cannot replace content of ref node - you need to delete individual child nodes.

b) Adding new properties or relations
POST /graphdb/{node_id}

In request body include "yaml" just properties and relations (syntax just like in POST) to append to existing properties/relations.
You cannot replace content of ref node - you need to delete individual child nodes.
Do not include "node".

4) Removing a node:

DELETE /graphdb/{node_id}

It automatically removes all incoming/outgoing relations and their properties; also deletes properties of the node.

5) List all nodes (TODO: Pagination)
GET /graphdb/nodes

6) Delete all nodes (it also deletes the ref node - next time it is required, it will be auto-created)

DELETE /graphdb/nodes
